version: 0.2

env:
  variables:
    # Define environment variables for better maintainability
    PYTHON_VERSION: "3.9"
    DJANGO_SETTINGS_MODULE: "your_project.settings"
    AWS_DEFAULT_REGION: "ap-south-1"
    CODEARTIFACT_DOMAIN: "todolist"
    CODEARTIFACT_DOMAIN_OWNER: "247487031027"
    CODEARTIFACT_REPOSITORY: "todolist-devops-cicd"
    S3_BUCKET: "todolist-devops-cicd"

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo "Starting installation phase at $(date)"
      - echo "Python version:"
      - python3 --version
      - echo "Upgrading pip"
      - pip install --upgrade pip
      - echo "Logging in to CodeArtifact"
      - |
        aws codeartifact login \
          --tool pip \
          --repository $CODEARTIFACT_REPOSITORY \
          --domain $CODEARTIFACT_DOMAIN \
          --domain-owner $CODEARTIFACT_DOMAIN_OWNER \
          --region $AWS_DEFAULT_REGION
      - echo "Installing requirements"
      - |
        if [ -f "backend/requirements.txt" ]; then
          pip install -r backend/requirements.txt
          echo "Requirements installed successfully"
        else
          echo "ERROR: requirements.txt not found"
          exit 1
        fi

  pre_build:
    commands:
      - echo "Starting pre-build phase at $(date)"
      - echo "Downloading .env file from S3"
      - |
        if aws s3 cp s3://$S3_BUCKET/todolist/.env .env; then
          echo ".env file downloaded successfully"
          # Verify .env file exists and is not empty
          if [ -s .env ]; then
            echo ".env file is valid"
          else
            echo "WARNING: .env file is empty"
          fi
        else
          echo "WARNING: .env file not found in S3, using default configuration"
          # Create a minimal .env file or handle this case appropriately
          touch .env
        fi
      - echo "Navigating to backend directory"
      - cd backend
      - echo "Current directory: $(pwd)"
      - echo "Running Django migrations"
      - |
        if python3 manage.py makemigrations --dry-run --check; then
          echo "No new migrations needed"
        else
          echo "Creating new migrations"
          python3 manage.py makemigrations
        fi
      - python3 manage.py migrate --noinput
      - echo "Migrations completed successfully"
      - cd ..

  build:
    commands:
      - echo "Starting build phase at $(date)"
      - echo "Collecting static files"
      - cd backend
      - |
        if python3 manage.py collectstatic --noinput --clear; then
          echo "Static files collected successfully"
        else
          echo "WARNING: Static files collection failed or no static files found"
        fi
      - cd ..
      - echo "Making shell scripts executable"
      - |
        if [ -d "scripts" ]; then
          chmod +x scripts/*.sh
          echo "Shell scripts made executable"
          ls -la scripts/
        else
          echo "WARNING: scripts directory not found"
        fi
      - echo "Preparing deployment package..."
      - mkdir -p packaged-output
      - echo "Copying application files"
      - |
        # Copy files that exist
        for item in backend scripts appspec.yml .env; do
          if [ -e "$item" ]; then
            cp -r "$item" packaged-output/
            echo "Copied: $item"
          else
            echo "WARNING: $item not found, skipping"
          fi
        done
      - echo "Contents of packaged-output:"
      - ls -la packaged-output/
      - echo "Creating deployment zip"
      - cd packaged-output
      - zip -r ../todolist.zip . -x "*.pyc" "*/__pycache__/*" "*.git/*" "*.DS_Store"
      - cd ..
      - echo "Deployment package created successfully"
      - ls -la todolist.zip

  post_build:
    commands:
      - echo "Starting post-build phase at $(date)"
      - echo "Uploading deployment package to S3"
      - |
        if aws s3 cp todolist.zip s3://$S3_BUCKET/todolist.zip; then
          echo "Deployment package uploaded successfully"
          # Verify the upload
          aws s3 ls s3://$S3_BUCKET/todolist.zip
        else
          echo "ERROR: Failed to upload deployment package"
          exit 1
        fi
      - echo "Build completed successfully at $(date)"

artifacts:
  files:
    - todolist.zip
  name: todolist-$(date +%Y-%m-%d-%H-%M-%S)

cache:
  paths:
    - '/root/.cache/pip/**/*'